#!/usr/bin/env python3
"""
Sistema de Aprendizaje Adaptativo - Versi√≥n Extendida
Dise√±ado para ense√±ar desde CERO hasta nivel EXPERTO
Con explicaciones s√∫per claras y ejemplos del mundo real
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import random
import time

class SistemaAprendizajeCompleto:
    def __init__(self):
        self.usuarios = {}
        self.modulos = self._crear_temario_completo()
        self.glosario = self._crear_glosario()
        self.ruta_datos = "datos_aprendizaje"
        self._crear_directorios()
    
    def _crear_directorios(self):
        """Crea los directorios necesarios para almacenar datos"""
        directorios = [
            self.ruta_datos,
            f"{self.ruta_datos}/usuarios",
            f"{self.ruta_datos}/progreso",
            f"{self.ruta_datos}/evaluaciones",
            f"{self.ruta_datos}/certificados"
        ]
        for dir in directorios:
            os.makedirs(dir, exist_ok=True)
    
    def _crear_glosario(self) -> Dict:
        """Crea un glosario de t√©rminos para principiantes"""
        return {
            "algoritmo": "Es como una receta de cocina: pasos ordenados para resolver un problema",
            "variable": "Es como una caja donde guardas informaci√≥n que puede cambiar",
            "funci√≥n": "Es como una m√°quina: le das algo y te devuelve un resultado",
            "bucle": "Es repetir algo varias veces, como dar vueltas en c√≠rculo",
            "condici√≥n": "Es como un sem√°foro: si est√° verde haces algo, si est√° rojo haces otra cosa",
            "array": "Es como una fila de cajas numeradas donde guardas cosas",
            "debugging": "Es como ser detective: buscar y arreglar errores en tu c√≥digo",
            "API": "Es como un mesero: pides algo y te trae lo que necesitas",
            "base de datos": "Es como un archivador gigante muy organizado",
            "framework": "Es como un kit de construcci√≥n con piezas pre-hechas"
        }
    
    def _crear_temario_completo(self) -> Dict:
        """Crea un temario s√∫per completo desde cero hasta experto"""
        return {
            "nivel_0_absoluto_principiante": {
                "titulo": "üå± EMPEZANDO DESDE CERO",
                "descripcion": "Para personas que nunca han tocado una computadora profesionalmente",
                "duracion_total": "2 semanas",
                "modulos": [
                    {
                        "id": "que_es_programar",
                        "titulo": "¬øQu√© es programar? Explicado como para un ni√±o de 5 a√±os",
                        "duracion": 45,
                        "contenido": {
                            "introduccion": """
                            Imagina que tienes un robot amigo. Este robot es muy obediente pero tambi√©n
                            muy tonto - solo hace EXACTAMENTE lo que le dices. Si quieres que te haga
                            un sandwich, no puedes solo decirle 'hazme un sandwich'. Tienes que decirle:
                            1. Ve a la cocina
                            2. Abre el caj√≥n del pan
                            3. Saca dos rebanadas
                            4. Abre la nevera... etc.
                            
                            ¬°Eso es programar! Dar instrucciones s√∫per espec√≠ficas a una computadora.
                            """,
                            "conceptos_clave": [
                                "Las computadoras son tontas pero r√°pidas",
                                "Programar es dar instrucciones paso a paso",
                                "No hay magia, solo l√≥gica"
                            ],
                            "ejemplos_cotidianos": [
                                "Receta de cocina = Programa",
                                "Instrucciones de IKEA = Algoritmo",
                                "GPS dando direcciones = Ejecuci√≥n de c√≥digo"
                            ],
                            "ejercicio_mental": "Escribe los pasos para lavarte los dientes",
                            "ejercicio_practico": "Juega a ser robot con un amigo d√°ndole instrucciones"
                        }
                    },
                    {
                        "id": "computadora_amiga",
                        "titulo": "Tu computadora: de enemiga a mejor amiga",
                        "duracion": 60,
                        "contenido": {
                            "introduccion": """
                            La computadora no muerde, ¬°lo prometo! Vamos a conocerla como si fuera
                            una nueva amiga. Aprender√°s qu√© hace cada parte y por qu√© no debes
                            tenerle miedo.
                            """,
                            "partes_explicadas": {
                                "teclado": "Como un piano pero para escribir",
                                "mouse": "Tu mano virtual dentro de la pantalla",
                                "pantalla": "La ventana a mundos digitales",
                                "CPU": "El cerebro que piensa muy r√°pido",
                                "memoria": "Donde guarda lo que est√° pensando ahora",
                                "disco duro": "El ba√∫l de los recuerdos permanentes"
                            },
                            "miedos_comunes": [
                                "No vas a romper nada haciendo clic",
                                "Los errores son normales y buenos para aprender",
                                "Ctrl+Z es tu mejor amigo (deshace cosas)"
                            ],
                            "ejercicios": [
                                "Abre y cierra 5 programas diferentes",
                                "Crea una carpeta con tu nombre",
                                "Escribe un documento y gu√°rdalo"
                            ]
                        }
                    },
                    {
                        "id": "internet_basico",
                        "titulo": "Internet: El mundo en tu pantalla",
                        "duracion": 45,
                        "contenido": {
                            "introduccion": """
                            Internet es como una biblioteca gigante donde todos pueden poner y
                            leer libros. Tambi√©n es como una plaza donde puedes hablar con
                            personas de todo el mundo.
                            """,
                            "conceptos_simples": {
                                "navegador": "Tu veh√≠culo para viajar por internet",
                                "URL": "La direcci√≥n de una casa en internet",
                                "buscador": "Tu gu√≠a tur√≠stico personal",
                                "email": "Tu buz√≥n de correo digital"
                            },
                            "seguridad_basica": [
                                "No des informaci√≥n personal a extra√±os",
                                "Si algo parece demasiado bueno, probablemente es falso",
                                "Usa contrase√±as como si fueran llaves de tu casa"
                            ],
                            "practica": [
                                "Busca '¬øc√≥mo hacer pizza casera?'",
                                "Env√≠a un email a ti mismo",
                                "Marca 3 p√°ginas web como favoritas"
                            ]
                        }
                    }
                ]
            },
            
            "nivel_1_principiante": {
                "titulo": "üåø PRINCIPIANTE - Tus primeros pasos",
                "descripcion": "Ahora que conoces la computadora, vamos a empezar a programar",
                "duracion_total": "1 mes",
                "modulos": [
                    {
                        "id": "primer_programa",
                        "titulo": "Tu primer programa: ¬°Hola Mundo!",
                        "duracion": 90,
                        "contenido": {
                            "introduccion": """
                            ¬øRecuerdas el robot del que hablamos? Ahora le vamos a ense√±ar a
                            hablar. Empezaremos con algo simple: hacer que diga 'Hola Mundo'.
                            Es tradici√≥n que este sea el primer programa de todos.
                            """,
                            "paso_a_paso": [
                                "Abrimos un programa para escribir c√≥digo (como Word pero para robots)",
                                "Escribimos: print('Hola Mundo')",
                                "Le damos al bot√≥n de 'play'",
                                "¬°La computadora nos saluda!"
                            ],
                            "explicacion_detallada": {
                                "print": "Es como decirle a la computadora 'muestra esto en la pantalla'",
                                "comillas": "Todo lo que est√° entre comillas es texto literal",
                                "parentesis": "Es como un sobre donde metemos lo que queremos mostrar"
                            },
                            "variaciones": [
                                "print('Hola, me llamo [tu nombre]')",
                                "print('Tengo [tu edad] a√±os')",
                                "print('Mi color favorito es el [color]')"
                            ],
                            "mini_proyecto": "Haz que la computadora se presente por ti con 5 frases"
                        }
                    },
                    {
                        "id": "variables_cajas_magicas",
                        "titulo": "Variables: Las cajas m√°gicas de la programaci√≥n",
                        "duracion": 120,
                        "contenido": {
                            "introduccion": """
                            Imagina que tienes cajas m√°gicas donde puedes guardar cosas:
                            n√∫meros, palabras, lo que sea. Y adem√°s, les puedes poner
                            etiquetas para acordarte qu√© hay dentro.
                            """,
                            "ejemplos_visuales": {
                                "nombre = 'Juan'": "Una caja llamada 'nombre' que contiene 'Juan'",
                                "edad = 25": "Una caja llamada 'edad' que contiene el n√∫mero 25",
                                "tiene_mascota = True": "Una caja que dice si tienes mascota o no"
                            },
                            "tipos_de_cajas": {
                                "texto": "Para guardar palabras y frases (string)",
                                "numeros": "Para guardar n√∫meros (int, float)",
                                "si_o_no": "Para guardar verdadero o falso (boolean)",
                                "listas": "Para guardar muchas cosas en orden (list)"
                            },
                            "analogias": [
                                "Variable de texto = Post-it con una nota",
                                "Variable num√©rica = Calculadora con un n√∫mero en pantalla",
                                "Variable booleana = Interruptor de luz (prendido/apagado)"
                            ],
                            "ejercicios_progresivos": [
                                "Crea variables con tu informaci√≥n personal",
                                "Haz operaciones matem√°ticas con variables num√©ricas",
                                "Combina variables de texto para formar frases"
                            ]
                        }
                    },
                    {
                        "id": "decisiones_if",
                        "titulo": "Tomando decisiones: Si esto, entonces aquello",
                        "duracion": 150,
                        "contenido": {
                            "introduccion": """
                            En la vida real tomamos decisiones todo el tiempo:
                            SI llueve ENTONCES llevo paraguas.
                            SI tengo hambre ENTONCES como algo.
                            Las computadoras tambi√©n pueden tomar decisiones as√≠.
                            """,
                            "estructura_simple": """
                            if esta_lloviendo:
                                print('Lleva paraguas')
                            else:
                                print('Disfruta el sol')
                            """,
                            "ejemplos_cotidianos": [
                                "Cajero autom√°tico: SI tienes saldo ENTONCES puedes retirar dinero",
                                "Sem√°foro: SI est√° verde ENTONCES los autos pasan",
                                "Alarma: SI son las 7am ENTONCES suena"
                            ],
                            "comparaciones": {
                                "==": "¬øEs igual a...?",
                                ">": "¬øEs mayor que...?",
                                "<": "¬øEs menor que...?",
                                "!=": "¬øEs diferente de...?"
                            },
                            "proyecto_interactivo": """
                            Crear un programa que:
                            1. Pregunte tu edad
                            2. Si eres mayor de 18, diga 'Puedes votar'
                            3. Si no, diga cu√°ntos a√±os te faltan
                            """
                        }
                    }
                ]
            },
            
            "nivel_2_intermedio_bajo": {
                "titulo": "üå≥ INTERMEDIO B√ÅSICO - Construyendo cimientos",
                "descripcion": "Ya sabes lo b√°sico, ahora vamos a construir cosas m√°s interesantes",
                "duracion_total": "2 meses",
                "modulos": [
                    {
                        "id": "bucles_repeticion",
                        "titulo": "Bucles: Hacer cosas muchas veces sin cansarte",
                        "duracion": 180,
                        "contenido": {
                            "introduccion": """
                            ¬øTe imaginas escribir 'Hola' 1000 veces? ¬°Qu√© aburrido!
                            Por suerte, podemos decirle a la computadora que lo haga
                            por nosotros. Eso son los bucles: repetir cosas.
                            """,
                            "tipos_de_bucles": {
                                "for": """
                                Como contar del 1 al 10:
                                for numero in range(1, 11):
                                    print(numero)
                                """,
                                "while": """
                                Como esperar hasta que algo pase:
                                while no_tengo_sue√±o:
                                    ver_otra_serie_en_netflix()
                                """
                            },
                            "analogias_reales": [
                                "Lavadora: Repite el ciclo de lavado varias veces",
                                "Playlist de m√∫sica: Reproduce canciones una tras otra",
                                "Rutina de ejercicio: 3 series de 10 repeticiones"
                            ],
                            "proyectos": [
                                "Tabla de multiplicar autom√°tica",
                                "Contador regresivo para a√±o nuevo",
                                "Dibujar patrones con asteriscos"
                            ]
                        }
                    }
                ]
            }
        }
    
    def explicar_concepto(self, concepto: str) -> str:
        """Explica cualquier concepto de forma simple"""
        if concepto.lower() in self.glosario:
            return self.glosario[concepto.lower()]
        else:
            return "Ese concepto a√∫n no est√° en mi glosario, pero lo agregar√© pronto!"
    
    def evaluar_comprension_interactiva(self, usuario_id: str, tema_id: str) -> int:
        """Evaluaci√≥n m√°s interactiva y amigable"""
        print("\nüéØ MOMENTO DE PR√ÅCTICA")
        print("No te preocupes, no es un examen. Solo quiero ver qu√© aprendiste.\n")
        
        puntuacion = 0
        
        # Pregunta 1: Explicar con tus palabras
        print("1Ô∏è‚É£ Expl√≠came con TUS PROPIAS PALABRAS qu√© aprendiste hoy.")
        print("   (Como si se lo explicaras a tu abuela)")
        respuesta1 = input("\n   Tu explicaci√≥n: ")
        
        if len(respuesta1) > 30:
            puntuacion += 30
            print("   ‚ú® ¬°Excelente! Me encanta c√≥mo lo explicaste.\n")
        else:
            puntuacion += 15
            print("   üí° Bien, pero podr√≠as elaborar un poco m√°s.\n")
        
        # Pregunta 2: Ejemplo pr√°ctico
        print("2Ô∏è‚É£ Dame un ejemplo de la VIDA REAL donde usar√≠as esto.")
        respuesta2 = input("\n   Tu ejemplo: ")
        
        if "por ejemplo" in respuesta2.lower() or len(respuesta2) > 40:
            puntuacion += 35
            print("   üéâ ¬°Genial ejemplo! Eso demuestra que lo entendiste.\n")
        else:
            puntuacion += 20
            print("   üëç Buen intento. Los ejemplos ayudan a fijar el conocimiento.\n")
        
        # Pregunta 3: Aplicaci√≥n creativa
        print("3Ô∏è‚É£ Si fueras a ense√±ar esto a un ni√±o de 10 a√±os, ¬øqu√© juego inventar√≠as?")
        respuesta3 = input("\n   Tu idea: ")
        
        if len(respuesta3) > 20:
            puntuacion += 35
            print("   üåü ¬°Qu√© creativo! Ense√±ar es la mejor forma de aprender.\n")
        else:
            puntuacion += 20
            print("   üí≠ Interesante. La creatividad es clave en programaci√≥n.\n")
        
        # Feedback motivacional
        print("\n" + "="*50)
        if puntuacion >= 90:
            print("üèÜ ¬°INCRE√çBLE! Dominaste el tema completamente.")
            print("   Est√°s listo para el siguiente desaf√≠o.")
        elif puntuacion >= 70:
            print("üåü ¬°MUY BIEN! Entendiste los conceptos principales.")
            print("   Con un poco m√°s de pr√°ctica ser√°s experto.")
        elif puntuacion >= 50:
            print("üëè ¬°BIEN HECHO! Vas por buen camino.")
            print("   Practica los ejercicios extra para reforzar.")
        else:
            print("üå± ¬°NO TE PREOCUPES! Todos aprendemos a nuestro ritmo.")
            print("   Volvamos a repasar juntos el tema.")
        
        return puntuacion
    
    def _guardar_usuario(self, usuario_id: str):
        """Guarda los datos del usuario en archivo"""
        try:
            archivo_usuario = f"{self.ruta_datos}/usuarios/{usuario_id}.json"
            with open(archivo_usuario, 'w', encoding='utf-8') as f:
                json.dump(self.usuarios[usuario_id], f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Error al guardar usuario: {e}")
    
    def _cargar_usuario(self, usuario_id: str) -> bool:
        """Carga los datos del usuario desde archivo"""
        try:
            archivo_usuario = f"{self.ruta_datos}/usuarios/{usuario_id}.json"
            if os.path.exists(archivo_usuario):
                with open(archivo_usuario, 'r', encoding='utf-8') as f:
                    self.usuarios[usuario_id] = json.load(f)
                return True
            return False
        except Exception as e:
            print(f"‚ùå Error al cargar usuario: {e}")
            return False
    
    def registrar_usuario(self, nombre: str, email: str) -> str:
        """Registra un nuevo usuario con bienvenida especial"""
        usuario_id = f"user_{len(self.usuarios) + 1}"
        self.usuarios[usuario_id] = {
            "nombre": nombre,
            "email": email,
            "fecha_registro": datetime.now().isoformat(),
            "nivel_actual": "nivel_0_absoluto_principiante",
            "progreso": {},
            "evaluaciones_completadas": [],
            "puntuacion_total": 0,
            "logros": [],
            "retos_completados": [],
            "preferencias": {
                "modo_aprendizaje": "visual",
                "tiempo_diario": 30,
                "recordatorios": True
            }
        }
        
        self._guardar_usuario(usuario_id)
        
        # Bienvenida especial
        print(f"\nüéâ ¬°BIENVENIDO/A {nombre.upper()}!")
        print("="*50)
        print("üåü Has dado el primer paso en tu viaje para convertirte")
        print("   en un programador diferencial.")
        print("\nüìö En este sistema aprender√°s:")
        print("   ‚Ä¢ Desde los conceptos m√°s b√°sicos")
        print("   ‚Ä¢ Con explicaciones s√∫per claras") 
        print("   ‚Ä¢ A tu propio ritmo")
        print("   ‚Ä¢ Con proyectos divertidos")
        print("\nüéØ Tu ID √∫nico es: " + usuario_id)
        print("   (Gu√°rdalo para volver a entrar)")
        
        time.sleep(2)
        
        return usuario_id
    
    def iniciar_sesion(self, usuario_id: str) -> bool:
        """Inicia sesi√≥n con un usuario existente"""
        if self._cargar_usuario(usuario_id):
            print(f"\n‚úÖ ¬°Bienvenido de vuelta, {self.usuarios[usuario_id]['nombre']}!")
            return True
        else:
            print("\n‚ùå Usuario no encontrado. Verifica tu ID.")
            return False
    
    def estudiar_tema(self, usuario_id: str, tema_id: str):
        """Estudiar un tema espec√≠fico"""
        usuario = self.usuarios[usuario_id]
        
        # Buscar el tema en todos los niveles
        tema_encontrado = None
        for nivel in self.modulos.values():
            for modulo in nivel['modulos']:
                if modulo['id'] == tema_id:
                    tema_encontrado = modulo
                    break
            if tema_encontrado:
                break
        
        if not tema_encontrado:
            print("‚ùå Tema no encontrado.")
            return
        
        print("\n" + "="*60)
        print(f"üìñ {tema_encontrado['titulo']}")
        print("="*60)
        print(f"‚è±Ô∏è Duraci√≥n estimada: {tema_encontrado['duracion']} minutos")
        
        # Mostrar contenido
        contenido = tema_encontrado['contenido']
        
        if 'introduccion' in contenido:
            print("\nüåü INTRODUCCI√ìN:")
            print(contenido['introduccion'])
        
        if 'conceptos_clave' in contenido:
            print("\nüîë CONCEPTOS CLAVE:")
            for concepto in contenido['conceptos_clave']:
                print(f"   ‚Ä¢ {concepto}")
        
        if 'ejemplos_cotidianos' in contenido:
            print("\nüè† EJEMPLOS DE LA VIDA REAL:")
            for ejemplo in contenido['ejemplos_cotidianos']:
                print(f"   ‚Ä¢ {ejemplo}")
        
        input("\n‚è∏Ô∏è Presiona Enter cuando termines de leer...")
        
        # Evaluaci√≥n
        puntuacion = self.evaluar_comprension_interactiva(usuario_id, tema_id)
        
        # Actualizar progreso
        usuario['progreso'][tema_id] = {
            'fecha_completado': datetime.now().isoformat(),
            'puntuacion': puntuacion,
            'tiempo_estudio': tema_encontrado['duracion']
        }
        usuario['puntuacion_total'] += puntuacion
        
        self._guardar_usuario(usuario_id)
        
        print(f"\n‚úÖ Tema completado! +{puntuacion} puntos")
    
    def recomendar_siguiente_paso(self, usuario_id: str) -> str:
        """Recomienda el siguiente paso en el aprendizaje"""
        usuario = self.usuarios[usuario_id]
        nivel_actual = usuario['nivel_actual']
        
        if nivel_actual in self.modulos:
            modulos_nivel = self.modulos[nivel_actual]['modulos']
            
            # Buscar el primer m√≥dulo no completado
            for modulo in modulos_nivel:
                if modulo['id'] not in usuario['progreso']:
                    return f"üìñ {modulo['titulo']}"
            
            # Si complet√≥ todos los m√≥dulos del nivel, pasar al siguiente
            niveles = list(self.modulos.keys())
            idx_actual = niveles.index(nivel_actual)
            
            if idx_actual < len(niveles) - 1:
                siguiente_nivel = niveles[idx_actual + 1]
                usuario['nivel_actual'] = siguiente_nivel
                self._guardar_usuario(usuario_id)
                
                primer_modulo = self.modulos[siguiente_nivel]['modulos'][0]
                return f"üéâ ¬°Nuevo nivel desbloqueado! üìñ {primer_modulo['titulo']}"
            else:
                return "üèÜ ¬°Has completado todo el programa! Eres un experto."
        
        return "üìö Comienza con los fundamentos b√°sicos"
    
    def ver_progreso_detallado(self, usuario_id: str):
        """Muestra el progreso detallado del usuario"""
        usuario = self.usuarios[usuario_id]
        
        print("\n" + "="*60)
        print(f"üìä PROGRESO DETALLADO DE {usuario['nombre'].upper()}")
        print("="*60)
        
        print(f"\nüë§ PERFIL:")
        print(f"   üìß Email: {usuario['email']}")
        print(f"   üìÖ Registrado: {usuario['fecha_registro'][:10]}")
        print(f"   üéØ Nivel actual: {usuario['nivel_actual'].replace('_', ' ').title()}")
        print(f"   ‚≠ê Puntos totales: {usuario['puntuacion_total']}")
        
        print(f"\nüìö TEMAS COMPLETADOS:")
        if usuario['progreso']:
            for tema_id, progreso in usuario['progreso'].items():
                fecha = progreso['fecha_completado'][:10]
                puntos = progreso['puntuacion']
                print(f"   ‚úÖ {tema_id}: {puntos} puntos ({fecha})")
        else:
            print("   üå± A√∫n no has completado ning√∫n tema. ¬°Empecemos!")
        
        # Mostrar siguiente paso
        siguiente = self.recomendar_siguiente_paso(usuario_id)
        print(f"\nüéØ SIGUIENTE PASO:")
        print(f"   {siguiente}")
    
    def mostrar_informacion_sistema(self):
        """Muestra informaci√≥n sobre el sistema"""
        print("\n" + "="*60)
        print("ü§î ¬øQU√â ES EL SISTEMA DE APRENDIZAJE PYTHONIA?")
        print("="*60)
        
        print("""
üéØ OBJETIVO:
   Convertirte en un programador diferencial desde CERO absoluto.
   
üåü ¬øQU√â LO HACE ESPECIAL?
   ‚Ä¢ Explicaciones como para un ni√±o de 5 a√±os
   ‚Ä¢ Sin conocimientos previos necesarios
   ‚Ä¢ Proyectos divertidos y pr√°cticos
   ‚Ä¢ Avance a tu propio ritmo
   ‚Ä¢ Sistema de logros y motivaci√≥n
   
üìö NIVELES DE APRENDIZAJE:
   üå± Nivel 0: Absoluto principiante (2 semanas)
   üåø Nivel 1: Principiante (1 mes)
   üå≥ Nivel 2: Intermedio b√°sico (2 meses)
   üå≤ Nivel 3: Intermedio (3 meses)
   üèîÔ∏è Nivel 4: Avanzado (4 meses)
   ‚≠ê Nivel 5: Experto (6 meses)
   
üéÆ CARACTER√çSTICAS:
   ‚Ä¢ Evaluaciones interactivas (no ex√°menes aburridos)
   ‚Ä¢ Proyectos personalizados seg√∫n tus intereses
   ‚Ä¢ Sistema de logros y recompensas
   ‚Ä¢ Comunidad virtual de aprendizaje
   ‚Ä¢ Asistente IA para resolver dudas
   ‚Ä¢ Retos diarios para practicar
   
üí° FILOSOF√çA:
   "Aprender programaci√≥n debe ser divertido, no frustrante.
    Todos pueden ser programadores con la explicaci√≥n correcta."
        """)
        
        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def menu_principal_mejorado(self):
        """Men√∫ principal mejorado con m√°s opciones"""
        usuario_actual = None
        
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            
            print("\n" + "="*60)
            print("üöÄ SISTEMA DE APRENDIZAJE ADAPTATIVO - PYTHONIA")
            print("="*60)
            
            if not usuario_actual:
                print("\nüìö Aprende programaci√≥n desde CERO hasta EXPERTO")
                print("   Sin conocimientos previos necesarios")
                print("   Explicaciones claras como para un ni√±o de 5 a√±os")
                print("   Proyectos divertidos y pr√°cticos")
                
                print("\n1. üÜï Soy nuevo/a - Registrarme")
                print("2. üîë Ya tengo cuenta - Ingresar")
                print("3. ü§î ¬øQu√© es esto? - M√°s informaci√≥n")
                print("0. üö™ Salir")
                
                opcion = input("\nüéØ Tu elecci√≥n: ")
                
                if opcion == "1":
                    print("\nüìù REGISTRO DE NUEVO USUARIO")
                    nombre = input("üë§ Tu nombre: ").strip()
                    email = input("üìß Tu email: ").strip()
                    
                    if nombre and email:
                        usuario_actual = self.registrar_usuario(nombre, email)
                        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
                    else:
                        print("‚ùå Por favor completa todos los campos.")
                        time.sleep(2)
                
                elif opcion == "2":
                    print("\nüîë INICIAR SESI√ìN")
                    usuario_id = input("üéØ Tu ID de usuario: ").strip()
                    
                    if self.iniciar_sesion(usuario_id):
                        usuario_actual = usuario_id
                        time.sleep(2)
                    else:
                        time.sleep(2)
                
                elif opcion == "3":
                    self.mostrar_informacion_sistema()
                
                elif opcion == "0":
                    print("\nüëã ¬°Hasta luego! Sigue aprendiendo.")
                    break
                
                else:
                    print("‚ùå Opci√≥n no v√°lida.")
                    time.sleep(1)
            
            else:
                usuario = self.usuarios[usuario_actual]
                print(f"\nüëã Hola {usuario['nombre']}!")
                print(f"   Nivel: {usuario['nivel_actual'].replace('_', ' ').title()}")
                print(f"   Puntos: {usuario['puntuacion_total']} ‚≠ê")
                
                print("\nüìö APRENDIZAJE:")
                print("4. üéØ Continuar donde lo dej√©")
                print("5. üìñ Estudiar tema espec√≠fico")
                print("6. üó∫Ô∏è Ver mi ruta completa")
                print("7. üìä Mi progreso detallado")
                
                print("\nüéÆ PR√ÅCTICA:")
                print("8. üí° Reto diario")
                print("9. üõ†Ô∏è Proyecto personalizado")
                print("10. üß™ Modo pr√°ctica libre")
                
                print("\nüë• COMUNIDAD:")
                print("11. üí¨ Ver comunidad")
                print("12. ü§ñ Preguntar al asistente")
                print("13. üèÜ Mis logros")
                
                print("\n‚öôÔ∏è CONFIGURACI√ìN:")
                print("14. üë§ Mi perfil")
                print("15. üö™ Cerrar sesi√≥n")
                print("0. üö™ Salir del programa")
                
                opcion = input("\nüéØ Tu elecci√≥n: ")
                
                if opcion == "4":
                    siguiente = self.recomendar_siguiente_paso(usuario_actual)
                    if "completado todo" in siguiente:
                        print(siguiente)
                        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
                    else:
                        # Extraer el ID del tema del siguiente paso
                        tema_id = self.obtener_siguiente_tema_id(usuario_actual)
                        if tema_id:
                            self.estudiar_tema(usuario_actual, tema_id)
                        else:
                            print("‚ùå No se pudo determinar el siguiente tema.")
                            time.sleep(2)
                
                elif opcion == "5":
                    self.mostrar_menu_temas(usuario_actual)
                
                elif opcion == "6":
                    self.mostrar_ruta_completa(usuario_actual)
                
                elif opcion == "7":
                    self.ver_progreso_detallado(usuario_actual)
                    input("\n‚è∏Ô∏è Presiona Enter para continuar...")
                
                elif opcion == "8":
                    reto = self.mini_retos_diarios()
                    self.ejecutar_reto_diario(usuario_actual, reto)
                
                elif opcion == "9":
                    proyecto = self.generar_proyecto_personalizado(usuario_actual, usuario['nivel_actual'])
                    self.ejecutar_proyecto_personalizado(usuario_actual, proyecto)
                
                elif opcion == "10":
                    self.modo_practica_libre(usuario_actual)
                
                elif opcion == "11":
                    self.comunidad_virtual(usuario_actual)
                    input("\n‚è∏Ô∏è Presiona Enter para continuar...")
                
                elif opcion == "12":
                    self.chat_con_asistente(usuario_actual)
                
                elif opcion == "13":
                    self.sistema_logros(usuario_actual)
                    input("\n‚è∏Ô∏è Presiona Enter para continuar...")
                
                elif opcion == "14":
                    self.gestionar_perfil(usuario_actual)
                
                elif opcion == "15":
                    print(f"\nüëã ¬°Hasta luego, {usuario['nombre']}!")
                    usuario_actual = None
                    time.sleep(2)
                
                elif opcion == "0":
                    print(f"\nüëã ¬°Hasta luego, {usuario['nombre']}! Sigue aprendiendo.")
                    break
                
                else:
                    print("‚ùå Opci√≥n no v√°lida.")
                    time.sleep(1)
    
    def obtener_siguiente_tema_id(self, usuario_id: str) -> Optional[str]:
        """Obtiene el ID del siguiente tema a estudiar"""
        usuario = self.usuarios[usuario_id]
        nivel_actual = usuario['nivel_actual']
        
        if nivel_actual in self.modulos:
            modulos_nivel = self.modulos[nivel_actual]['modulos']
            
            # Buscar el primer m√≥dulo no completado
            for modulo in modulos_nivel:
                if modulo['id'] not in usuario['progreso']:
                    return modulo['id']
        
        return None
    
    def mostrar_menu_temas(self, usuario_id: str):
        """Muestra un men√∫ para seleccionar temas espec√≠ficos"""
        print("\nüìö SELECCIONAR TEMA ESPEC√çFICO")
        print("="*50)
        
        todos_los_temas = []
        for nivel_id, nivel in self.modulos.items():
            for modulo in nivel['modulos']:
                todos_los_temas.append({
                    'id': modulo['id'],
                    'titulo': modulo['titulo'],
                    'nivel': nivel['titulo'],
                    'duracion': modulo['duracion']
                })
        
        for i, tema in enumerate(todos_los_temas, 1):
            completado = "‚úÖ" if tema['id'] in self.usuarios[usuario_id]['progreso'] else "üî≤"
            print(f"{i:2d}. {completado} {tema['titulo']}")
            print(f"      üìÇ {tema['nivel']} | ‚è±Ô∏è {tema['duracion']} min")
        
        try:
            seleccion = int(input(f"\nüéØ Selecciona un tema (1-{len(todos_los_temas)}): "))
            if 1 <= seleccion <= len(todos_los_temas):
                tema_seleccionado = todos_los_temas[seleccion - 1]
                self.estudiar_tema(usuario_id, tema_seleccionado['id'])
            else:
                print("‚ùå Selecci√≥n no v√°lida.")
                time.sleep(2)
        except ValueError:
            print("‚ùå Por favor ingresa un n√∫mero v√°lido.")
            time.sleep(2)
    
    def mostrar_ruta_completa(self, usuario_id: str):
        """Muestra la ruta completa de aprendizaje"""
        usuario = self.usuarios[usuario_id]
        
        print("\nüó∫Ô∏è TU RUTA COMPLETA DE APRENDIZAJE")
        print("="*60)
        
        for nivel_id, nivel in self.modulos.items():
            # Estado del nivel
            modulos_nivel = nivel['modulos']
            completados = sum(1 for m in modulos_nivel if m['id'] in usuario['progreso'])
            total = len(modulos_nivel)
            
            if completados == total:
                estado_nivel = "‚úÖ COMPLETADO"
            elif completados > 0:
                estado_nivel = f"üèÉ EN PROGRESO ({completados}/{total})"
            else:
                estado_nivel = "üîí PENDIENTE"
            
            print(f"\n{nivel['titulo']}")
            print(f"   {estado_nivel} | ‚è±Ô∏è {nivel['duracion_total']}")
            print(f"   üìù {nivel['descripcion']}")
            
            # Mostrar m√≥dulos del nivel
            for modulo in modulos_nivel:
                icono = "‚úÖ" if modulo['id'] in usuario['progreso'] else "üî≤"
                print(f"      {icono} {modulo['titulo']} ({modulo['duracion']} min)")
        
        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def ejecutar_reto_diario(self, usuario_id: str, reto: Dict):
        """Ejecuta un reto diario"""
        print("\nüéØ RETO DIARIO")
        print("="*50)
        print(f"üèÜ {reto['titulo']}")
        print(f"üìù {reto['descripcion']}")
        print(f"üí° Pista: {reto['pista']}")
        print(f"‚≠ê Puntos: {reto['puntos']}")
        print(f"üî• Dificultad: {reto['dificultad']}")
        
        print("\n¬øEst√°s listo para el reto?")
        respuesta = input("1. üí™ ¬°Acepto el reto!  2. ‚è∞ Tal vez m√°s tarde\nüéØ Tu elecci√≥n: ")
        
        if respuesta == "1":
            print("\nüî• ¬°EXCELENTE! Tienes 15 minutos para completarlo.")
            print("Cuando termines, comparte tu soluci√≥n:")
            
            solucion = input("\nüìù Tu c√≥digo/soluci√≥n:\n")
            
            if len(solucion) > 20:
                print(f"\nüéâ ¬°Reto completado! +{reto['puntos']} puntos")
                self.usuarios[usuario_id]['puntuacion_total'] += reto['puntos']
                self.usuarios[usuario_id]['retos_completados'].append({
                    'reto': reto['titulo'],
                    'fecha': datetime.now().isoformat(),
                    'puntos': reto['puntos']
                })
                self._guardar_usuario(usuario_id)
            else:
                print("\nüí≠ Intenta dar m√°s detalles en tu soluci√≥n.")
        else:
            print("\nüëç ¬°No problema! El reto estar√° aqu√≠ cuando est√©s listo.")
        
        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def ejecutar_proyecto_personalizado(self, usuario_id: str, proyecto: Dict):
        """Ejecuta un proyecto personalizado"""
        print("\nüõ†Ô∏è PROYECTO PERSONALIZADO")
        print("="*50)
        print(f"üé® {proyecto['titulo']}")
        print(f"üìù {proyecto['descripcion']}")
        
        print("\nüìã PASOS DEL PROYECTO:")
        for i, paso in enumerate(proyecto['pasos'], 1):
            print(f"{i}. {paso}")
        
        print("\n¬øQuieres empezar este proyecto?")
        respuesta = input("1. üöÄ ¬°Empecemos!  2. üîÑ Otro proyecto  3. ‚è∞ M√°s tarde\nüéØ Tu elecci√≥n: ")
        
        if respuesta == "1":
            print("\nüéØ ¬°Perfecto! Vamos paso a paso:")
            
            for i, paso in enumerate(proyecto['pasos'], 1):
                print(f"\nüìå PASO {i}: {paso}")
                completado = input("¬øCompletaste este paso? (s/n): ").lower()
                
                if completado != 's':
                    print("üí° No te preocupes, toma tu tiempo. ¬°Puedes volver cuando quieras!")
                    break
            else:
                print("\nüéâ ¬°PROYECTO COMPLETADO! Eres incre√≠ble.")
                print("   +50 puntos por completar un proyecto personalizado!")
                self.usuarios[usuario_id]['puntuacion_total'] += 50
                self._guardar_usuario(usuario_id)
        
        elif respuesta == "2":
            nuevo_proyecto = self.generar_proyecto_personalizado(usuario_id, self.usuarios[usuario_id]['nivel_actual'])
            self.ejecutar_proyecto_personalizado(usuario_id, nuevo_proyecto)
        
        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def modo_practica_libre(self, usuario_id: str):
        """Modo de pr√°ctica libre"""
        print("\nüß™ MODO PR√ÅCTICA LIBRE")
        print("="*50)
        print("üéÆ Aqu√≠ puedes experimentar sin presi√≥n.")
        print("üí° Prueba c√≥digo, haz preguntas, explora conceptos.")
        
        while True:
            print("\n¬øQu√© quieres hacer?")
            print("1. üí≠ Explicar un concepto")
            print("2. üîç Buscar en el glosario")
            print("3. üìñ Repasar un tema")
            print("4. üé≤ Ejercicio aleatorio")
            print("5. üö™ Volver al men√∫ principal")
            
            opcion = input("\nüéØ Tu elecci√≥n: ")
            
            if opcion == "1":
                concepto = input("\nü§î ¬øQu√© concepto quieres que te explique? ")
                explicacion = self.explicar_concepto(concepto)
                print(f"\nüí° {explicacion}")
            
            elif opcion == "2":
                print("\nüìö GLOSARIO DISPONIBLE:")
                for termino, definicion in self.glosario.items():
                    print(f"   üîπ {termino}: {definicion}")
            
            elif opcion == "3":
                self.mostrar_menu_temas(usuario_id)
                break
            
            elif opcion == "4":
                ejercicios = [
                    "Crea una variable con tu edad y mu√©strala en pantalla",
                    "Haz un programa que salude a 3 amigos diferentes",
                    "Crea una lista con tus 5 comidas favoritas",
                    "Programa que diga si un n√∫mero es par o impar",
                    "Contador que cuente del 1 al 10"
                ]
                ejercicio = random.choice(ejercicios)
                print(f"\nüé≤ EJERCICIO ALEATORIO:")
                print(f"   {ejercicio}")
                
                solucion = input("\nüìù Tu soluci√≥n (o 'saltar'): ")
                if solucion.lower() != 'saltar':
                    print("üëè ¬°Excelente pr√°ctica!")
            
            elif opcion == "5":
                break
            
            else:
                print("‚ùå Opci√≥n no v√°lida.")
            
            input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def chat_con_asistente(self, usuario_id: str):
        """Chat con el asistente IA"""
        print("\nü§ñ ASISTENTE PYTHONIA")
        print("="*50)
        print("üí¨ ¬°Hola! Soy tu asistente virtual.")
        print("   Puedes preguntarme sobre programaci√≥n, motivaci√≥n, o lo que necesites.")
        print("   Escribe 'salir' para volver al men√∫ principal.")
        
        while True:
            pregunta = input("\nüí≠ Tu pregunta: ").strip()
            
            if pregunta.lower() in ['salir', 'exit', 'quit']:
                print("üëã ¬°Hasta luego! Siempre estar√© aqu√≠ para ayudarte.")
                break
            
            if pregunta:
                respuesta = self.asistente_ia(pregunta)
                print(f"\nü§ñ {respuesta}")
            else:
                print("ü§î No entend√≠ tu pregunta. ¬øPodr√≠as ser m√°s espec√≠fico?")
    
    def gestionar_perfil(self, usuario_id: str):
        """Gestiona el perfil del usuario"""
        usuario = self.usuarios[usuario_id]
        
        while True:
            print("\nüë§ GESTI√ìN DE PERFIL")
            print("="*50)
            print(f"üìù Nombre: {usuario['nombre']}")
            print(f"üìß Email: {usuario['email']}")
            print(f"üìÖ Registro: {usuario['fecha_registro'][:10]}")
            print(f"üéØ Nivel: {usuario['nivel_actual'].replace('_', ' ').title()}")
            print(f"‚≠ê Puntos: {usuario['puntuacion_total']}")
            
            print("\n‚öôÔ∏è PREFERENCIAS:")
            prefs = usuario['preferencias']
            print(f"üé® Modo de aprendizaje: {prefs['modo_aprendizaje']}")
            print(f"‚è∞ Tiempo diario: {prefs['tiempo_diario']} minutos")
            print(f"üîî Recordatorios: {'S√≠' if prefs['recordatorios'] else 'No'}")
            
            print("\n¬øQu√© quieres cambiar?")
            print("1. üìù Cambiar nombre")
            print("2. üìß Cambiar email")
            print("3. üé® Modo de aprendizaje")
            print("4. ‚è∞ Tiempo de estudio diario")
            print("5. üîî Recordatorios")
            print("6. üìä Ver estad√≠sticas completas")
            print("7. üö™ Volver al men√∫")
            
            opcion = input("\nüéØ Tu elecci√≥n: ")
            
            if opcion == "1":
                nuevo_nombre = input("\nüìù Nuevo nombre: ").strip()
                if nuevo_nombre:
                    usuario['nombre'] = nuevo_nombre
                    print("‚úÖ Nombre actualizado!")
            
            elif opcion == "2":
                nuevo_email = input("\nüìß Nuevo email: ").strip()
                if nuevo_email:
                    usuario['email'] = nuevo_email
                    print("‚úÖ Email actualizado!")
            
            elif opcion == "3":
                print("\nüé® Modos disponibles:")
                print("1. Visual (con emojis y colores)")
                print("2. Texto simple")
                print("3. Interactivo (muchas preguntas)")
                modo = input("üéØ Tu elecci√≥n: ")
                modos = {"1": "visual", "2": "texto", "3": "interactivo"}
                if modo in modos:
                    usuario['preferencias']['modo_aprendizaje'] = modos[modo]
                    print("‚úÖ Modo actualizado!")
            
            elif opcion == "4":
                try:
                    tiempo = int(input("\n‚è∞ Minutos por d√≠a (15-120): "))
                    if 15 <= tiempo <= 120:
                        usuario['preferencias']['tiempo_diario'] = tiempo
                        print("‚úÖ Tiempo actualizado!")
                    else:
                        print("‚ùå Ingresa un tiempo entre 15 y 120 minutos.")
                except ValueError:
                    print("‚ùå Ingresa un n√∫mero v√°lido.")
            
            elif opcion == "5":
                recordar = input("\nüîî ¬øQuieres recordatorios? (s/n): ").lower()
                usuario['preferencias']['recordatorios'] = recordar == 's'
                print("‚úÖ Preferencia actualizada!")
            
            elif opcion == "6":
                self.mostrar_estadisticas_completas(usuario_id)
            
            elif opcion == "7":
                break
            
            else:
                print("‚ùå Opci√≥n no v√°lida.")
            
            if opcion in ["1", "2", "3", "4", "5"]:
                self._guardar_usuario(usuario_id)
                time.sleep(1)
    
    def mostrar_estadisticas_completas(self, usuario_id: str):
        """Muestra estad√≠sticas completas del usuario"""
        usuario = self.usuarios[usuario_id]
        
        print("\nüìä ESTAD√çSTICAS COMPLETAS")
        print("="*60)
        
        # Calcular estad√≠sticas
        total_temas = len(usuario['progreso'])
        total_puntos = usuario['puntuacion_total']
        total_retos = len(usuario['retos_completados'])
        
        # Tiempo total estimado
        tiempo_total = sum(p.get('tiempo_estudio', 30) for p in usuario['progreso'].values())
        
        # Promedio de puntuaci√≥n
        if total_temas > 0:
            promedio = sum(p.get('puntuacion', 0) for p in usuario['progreso'].values()) / total_temas
        else:
            promedio = 0
        
        print(f"üìö Temas completados: {total_temas}")
        print(f"‚≠ê Puntos totales: {total_puntos}")
        print(f"üéØ Retos completados: {total_retos}")
        print(f"‚è±Ô∏è Tiempo total de estudio: {tiempo_total} minutos ({tiempo_total//60}h {tiempo_total%60}m)")
        print(f"üìà Promedio de puntuaci√≥n: {promedio:.1f}/100")
        
        # Racha de estudio (simulada)
        racha_actual = random.randint(1, 15)
        racha_maxima = random.randint(racha_actual, 30)
        print(f"üî• Racha actual: {racha_actual} d√≠as")
        print(f"üèÜ Racha m√°xima: {racha_maxima} d√≠as")
        
        # Logros desbloqueados
        logros_totales = 7  # N√∫mero total de logros disponibles
        logros_usuario = len(usuario.get('logros', []))
        print(f"üèÖ Logros: {logros_usuario}/{logros_totales}")
        
        # Nivel de maestr√≠a
        if total_puntos >= 1000:
            nivel_maestria = "üåü Experto"
        elif total_puntos >= 500:
            nivel_maestria = "‚≠ê Avanzado"
        elif total_puntos >= 200:
            nivel_maestria = "üî• Intermedio"
        elif total_puntos >= 50:
            nivel_maestria = "üå± Principiante"
        else:
            nivel_maestria = "üê£ Novato"
        
        print(f"üéñÔ∏è Nivel de maestr√≠a: {nivel_maestria}")
        
        input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def generar_proyecto_personalizado(self, usuario_id: str, nivel: str) -> Dict:
        """Genera un proyecto personalizado seg√∫n intereses del usuario"""
        
        print("\nüé® PROYECTO PERSONALIZADO")
        print("Vamos a crear un proyecto especial para ti.\n")
        
        # Preguntar intereses
        print("¬øQu√© te gusta? (elige uno)")
        intereses = ["üéÆ Videojuegos", "üéµ M√∫sica", "üìö Libros", "üçï Comida", "‚öΩ Deportes"]
        for i, interes in enumerate(intereses, 1):
            print(f"{i}. {interes}")
        
        try:
            eleccion = input("\nTu elecci√≥n (1-5): ")
        except:
            eleccion = "1"
        
        proyectos = {
            "1": {
                "titulo": "Tu Propio Juego de Aventuras",
                "descripcion": "Crea un juego donde el jugador toma decisiones",
                "pasos": [
                    "Dise√±a la historia con m√∫ltiples caminos",
                    "Crea el sistema de decisiones",
                    "Agrega un sistema de puntos",
                    "Incluye diferentes finales"
                ]
            },
            "2": {
                "titulo": "Playlist Manager Personal",
                "descripcion": "Organiza tu m√∫sica como un DJ profesional",
                "pasos": [
                    "Crea listas de reproducci√≥n",
                    "Sistema de b√∫squeda por g√©nero",
                    "Reproduce canciones aleatoriamente",
                    "Guarda tus playlists favoritas"
                ]
            },
            "3": {
                "titulo": "Biblioteca Digital Personal",
                "descripcion": "Tu propio Goodreads casero",
                "pasos": [
                    "Registra libros le√≠dos",
                    "Sistema de calificaci√≥n",
                    "Notas sobre cada libro",
                    "Estad√≠sticas de lectura"
                ]
            },
            "4": {
                "titulo": "Recetario Inteligente",
                "descripcion": "Tu chef personal digital",
                "pasos": [
                    "Guarda tus recetas favoritas",
                    "Busca por ingredientes",
                    "Calcula porciones autom√°ticamente",
                    "Sugiere recetas seg√∫n lo que tienes"
                ]
            },
            "5": {
                "titulo": "Estad√≠sticas Deportivas Pro",
                "descripcion": "Analiza como un comentarista profesional",
                "pasos": [
                    "Registra resultados de partidos",
                    "Calcula estad√≠sticas de jugadores",
                    "Predice resultados futuros",
                    "Crea gr√°ficos de rendimiento"
                ]
            }
        }
        
        proyecto = proyectos.get(eleccion, proyectos["1"])
        return proyecto
    
    def sistema_logros(self, usuario_id: str) -> None:
        """Sistema de logros y recompensas para motivar"""
        usuario = self.usuarios[usuario_id]
        
        logros = {
            "primer_paso": {
                "nombre": "üê£ Primer Paso",
                "descripcion": "Completaste tu primer tema",
                "desbloqueado": len(usuario['progreso']) >= 1
            },
            "semana_constante": {
                "nombre": "üî• En Racha",
                "descripcion": "Estudiaste 7 d√≠as seguidos",
                "desbloqueado": random.choice([True, False])  # Simulado
            },
            "nocturno": {
                "nombre": "ü¶â Ave Nocturna",
                "descripcion": "Estudiaste despu√©s de las 10 PM",
                "desbloqueado": random.choice([True, False])  # Simulado
            },
            "perfeccionista": {
                "nombre": "üíØ Perfeccionista",
                "descripcion": "100 puntos en una evaluaci√≥n",
                "desbloqueado": any(p.get('puntuacion', 0) >= 100 for p in usuario['progreso'].values())
            },
            "explorador": {
                "nombre": "üó∫Ô∏è Explorador",
                "descripcion": "Probaste todos los tipos de ejercicios",
                "desbloqueado": len(usuario['progreso']) >= 10
            },
            "mentor": {
                "nombre": "üéì Mentor",
                "descripcion": "Ayudaste a otro estudiante",
                "desbloqueado": False
            },
            "innovador": {
                "nombre": "üí° Innovador",
                "descripcion": "Creaste tu propia soluci√≥n √∫nica",
                "desbloqueado": usuario['puntuacion_total'] >= 500
            }
        }
        
        print("\nüèÜ TUS LOGROS")
        print("="*50)
        
        desbloqueados = 0
        for logro in logros.values():
            if logro['desbloqueado']:
                print(f"‚úÖ {logro['nombre']} - {logro['descripcion']}")
                desbloqueados += 1
            else:
                print(f"üîí {logro['nombre']} - ???")
        
        print(f"\nLogros desbloqueados: {desbloqueados}/{len(logros)}")
        print(f"Nivel de Maestr√≠a: {'‚≠ê' * (desbloqueados // 2)}")
    
    def comunidad_virtual(self, usuario_id: str) -> None:
        """Simula una comunidad de aprendizaje"""
        print("\nüë• COMUNIDAD PYTHONIA")
        print("="*50)
        
        mensajes_comunidad = [
            {
                "usuario": "Maria_Dev",
                "mensaje": "¬°Acabo de completar mi primer bucle for! üéâ",
                "likes": 42
            },
            {
                "usuario": "CarlosCode",
                "mensaje": "Tip del d√≠a: print() es tu mejor amigo para debugging",
                "likes": 78
            },
            {
                "usuario": "Ana_Python",
                "mensaje": "¬øAlguien m√°s confundido con las listas al principio?",
                "likes": 23,
                "respuestas": [
                    "¬°Yo tambi√©n! Pero practicando se vuelve f√°cil",
                    "Piensa en ellas como cajones organizados"
                ]
            },
            {
                "usuario": "Luis_Learn",
                "mensaje": "Complet√© el proyecto de la calculadora üí™",
                "likes": 56
            }
        ]
        
        print("üì¢ Feed de la Comunidad:\n")
        for msg in mensajes_comunidad:
            print(f"üë§ {msg['usuario']}")
            print(f"   {msg['mensaje']}")
            print(f"   ‚ù§Ô∏è {msg['likes']} likes")
            if 'respuestas' in msg:
                for respuesta in msg['respuestas']:
                    print(f"   ‚Ü≥ {respuesta}")
            print()
        
        accion = input("¬øQuieres publicar algo? (s/n): ")
        if accion.lower() == 's':
            mensaje = input("Tu mensaje: ")
            print(f"\n‚úÖ ¬°Publicado! Tu mensaje ya est√° en la comunidad.")
            print("   ‚ù§Ô∏è Maria_Dev le dio like a tu publicaci√≥n")
    
    def asistente_ia(self, pregunta: str) -> str:
        """Asistente que responde preguntas comunes"""
        respuestas = {
            "error": """
            ü§ñ Los errores son tus amigos! Aqu√≠ van tips:
            1. Lee el mensaje completo del error
            2. Busca el n√∫mero de l√≠nea mencionado
            3. Verifica ortograf√≠a y puntuaci√≥n
            4. Googlea el error (todos lo hacemos)
            5. No te frustres, es parte del proceso
            """,
            "motivacion": """
            üåü ¬°Vas genial! Recuerda:
            - Todos empezamos desde cero
            - Cada error es una lecci√≥n
            - La pr√°ctica hace al maestro
            - Tu ritmo es el correcto
            - ¬°Ya has avanzado m√°s de lo que crees!
            """,
            "tiempo": """
            ‚è∞ Sobre el tiempo de aprendizaje:
            - 30 min al d√≠a es mejor que 3 horas una vez
            - La consistencia gana a la intensidad
            - Descansa cuando lo necesites
            - Celebra peque√±os logros
            - No hay prisa, disfruta el viaje
            """,
            "proyecto": """
            üí° Ideas para tu pr√≥ximo proyecto:
            - Empieza simple y ve agregando features
            - Resuelve un problema personal
            - Copia algo que te guste y modif√≠calo
            - Pide feedback en la comunidad
            - No busques perfecci√≥n, busca progreso
            """
        }
        
        # Buscar palabra clave en la pregunta
        pregunta_lower = pregunta.lower()
        for clave, respuesta in respuestas.items():
            if clave in pregunta_lower:
                return respuesta
        
        return """
        ü§ñ Hmm, no estoy seguro de entender tu pregunta.
        Intenta preguntar sobre:
        - Errores y debugging
        - Motivaci√≥n para continuar
        - Tiempo de estudio
        - Ideas de proyectos
        """
    
    def mini_retos_diarios(self) -> Dict:
        """Genera mini retos diarios para pr√°ctica constante"""
        import random
        
        retos = [
            {
                "titulo": "üéØ Reto del D√≠a: Hola Personalizado",
                "descripcion": "Haz que la computadora salude a 5 amigos diferentes",
                "pista": "Usa un bucle for y una lista de nombres",
                "dificultad": "F√°cil",
                "puntos": 10
            },
            {
                "titulo": "üé≤ Reto del D√≠a: Dado Digital",
                "descripcion": "Crea un dado que tire n√∫meros del 1 al 6",
                "pista": "Investiga sobre 'random.randint()'",
                "dificultad": "F√°cil",
                "puntos": 15
            },
            {
                "titulo": "üî¢ Reto del D√≠a: Calculadora de Propinas",
                "descripcion": "Calcula autom√°ticamente el 15% de propina",
                "pista": "Multiplica por 0.15",
                "dificultad": "Medio",
                "puntos": 20
            },
            {
                "titulo": "üìù Reto del D√≠a: Lista de Tareas",
                "descripcion": "Crea una lista donde puedas agregar y quitar tareas",
                "pista": "Usa append() y remove()",
                "dificultad": "Medio",
                "puntos": 25
            },
            {
                "titulo": "üéÆ Reto del D√≠a: Piedra, Papel o Tijera",
                "descripcion": "Juega contra la computadora",
                "pista": "La computadora elige random, t√∫ con input()",
                "dificultad": "Dif√≠cil",
                "puntos": 30
            }
        ]
        
        return random.choice(retos)
    
    def modo_historia(self, usuario_id: str, tema_id: str) -> None:
        """Presenta el contenido como una historia interactiva"""
        print("\nüìñ MODO HISTORIA ACTIVADO")
        print("="*50)
        
        historias = {
            "variables_cajas_magicas": """
            üè∞ LA LEYENDA DE LAS CAJAS M√ÅGICAS
            
            En el reino de Pythonia, existe una antigua magia llamada 'Variables'.
            
            Los magos de Pythonia descubrieron que pod√≠an crear cajas m√°gicas
            invisibles donde guardar cualquier cosa: n√∫meros m√°gicos, palabras
            de poder, hasta decisiones importantes.
            
            Tu primera misi√≥n como aprendiz es crear tu propia caja m√°gica:
            
            >>> nombre_heroe = 'Sir Python'
            
            ¬°Felicidades! Acabas de crear una caja llamada 'nombre_heroe' 
            y guardaste dentro el nombre 'Sir Python'.
            
            Ahora, cada vez que digas 'nombre_heroe', la magia te devolver√°
            lo que guardaste dentro...
            
            [Presiona Enter para continuar tu aventura...]
            """,
            
            "bucles_repeticion": """
            ‚öîÔ∏è LA BATALLA DE LOS MIL GUERREROS
            
            El malvado Wizard Bug ha invocado 1000 guerreros oscuros.
            ¬øDeber√°s pelear con cada uno individualmente? ¬°Por supuesto que no!
            
            Los antiguos magos crearon el hechizo 'For Loop':
            
            for guerrero in range(1000):
                lanzar_hechizo_luz()
            
            Con este poderoso conjuro, derrotas a todos los guerreros
            con un solo hechizo que se repite 1000 veces.
            
            ¬°Pero cuidado! Si olvidas el l√≠mite, el hechizo podr√≠a
            repetirse para siempre (bucle infinito) y agotar tu magia...
            
            [Presiona Enter para aprender m√°s hechizos...]
            """
        }
        
        if tema_id in historias:
            print(historias[tema_id])
            input()
        else:
            print("Esta historia a√∫n est√° siendo escrita por los sabios...")
    
    def visualizador_progreso_visual(self, usuario_id: str) -> None:
        """Muestra el progreso de forma visual y motivadora"""
        usuario = self.usuarios[usuario_id]
        total_temas = sum(len(nivel['modulos']) for nivel in self.modulos.values())
        temas_completados = len(usuario['progreso'])
        porcentaje = (temas_completados / total_temas) * 100 if total_temas > 0 else 0
        
        print("\nüöÄ TU VIAJE DE APRENDIZAJE")
        print("="*50)
        
        # Barra de progreso visual
        barra_length = 40
        completado = int((porcentaje / 100) * barra_length)
        barra = "‚ñà" * completado + "‚ñë" * (barra_length - completado)
        
        print(f"\nProgreso Total: [{barra}] {porcentaje:.1f}%")
        print(f"Temas Completados: {temas_completados}/{total_temas}")
        
        # Mapa del viaje
        print("\nüó∫Ô∏è MAPA DE TU AVENTURA:")
        print("\nüèÅ INICIO")
        
        niveles_nombres = {
            "nivel_0_absoluto_principiante": "üå± Valle de los Principiantes",
            "nivel_1_principiante": "üåø Bosque del Conocimiento",
            "nivel_2_intermedio_bajo": "üå≥ Monta√±as de la Pr√°ctica",
            "nivel_3_intermedio": "üå≤ Reino de las Aplicaciones",
            "nivel_4_avanzado": "üèîÔ∏è Cima de la Maestr√≠a",
            "nivel_5_experto": "‚≠ê Olimpo de los Expertos"
        }
        
        for nivel_id, nivel_nombre in niveles_nombres.items():
            if nivel_id in self.modulos:
                modulos_nivel = self.modulos[nivel_id]['modulos']
                completados_nivel = sum(1 for m in modulos_nivel if m['id'] in usuario['progreso'])
                total_nivel = len(modulos_nivel)
                
                if completados_nivel == total_nivel:
                    estado = "‚úÖ COMPLETADO"
                elif completados_nivel > 0:
                    estado = f"üèÉ EN PROGRESO ({completados_nivel}/{total_nivel})"
                else:
                    estado = "üîí BLOQUEADO"
                
                print(f"‚îú‚îÄ‚îÄ {nivel_nombre}")
                print(f"‚îÇ   {estado}")
        
        print("‚îî‚îÄ‚îÄ üèÜ FINAL: ¬°Programador Diferencial!")
        
        # Siguiente objetivo
        print(f"\nüéØ PR√ìXIMO OBJETIVO:")
        siguiente = self.recomendar_siguiente_paso(usuario_id)
        if isinstance(siguiente, str) and "completado" in siguiente:
            print("   ¬°Has completado todo! Eres un maestro üéì")
        else:
            print(f"   {siguiente}")
        
        # Estad√≠sticas motivadoras
        print(f"\nüìä ESTAD√çSTICAS √âPICAS:")
        print(f"   ‚ö° Puntos totales: {usuario['puntuacion_total']}")
        print(f"   üî• Racha actual: {random.randint(1, 7)} d√≠as")
        print(f"   ‚è±Ô∏è Tiempo total: {random.randint(10, 100)} horas")
        print(f"   üß† Conceptos dominados: {len(usuario['progreso']) * 3}")
    
    def generar_certificado(self, usuario_id: str, nivel_completado: str) -> None:
        """Genera un certificado de completaci√≥n"""
        usuario = self.usuarios[usuario_id]
        fecha_actual = datetime.now().strftime("%d/%m/%Y")
        
        certificado = f"""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë                    üèÜ CERTIFICADO DE LOGRO üèÜ                ‚ïë
        ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
        ‚ïë                                                              ‚ïë
        ‚ïë           Este certificado se otorga a:                      ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë               {usuario['nombre'].upper():^30}               ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë           Por completar exitosamente el:                     ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë               {nivel_completado.replace('_', ' ').upper():^30}               ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë           En el Sistema de Aprendizaje Pythonia              ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë           Fecha: {fecha_actual:^30}                     ‚ïë
        ‚ïë           Puntos obtenidos: {usuario['puntuacion_total']:^19}          ‚ïë
        ‚ïë                                                              ‚ïë
        ‚ïë                    ‚≠ê PYTHONIA ACADEMY ‚≠ê                    ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        
        print(certificado)
        
        # Guardar certificado
        try:
            archivo_cert = f"{self.ruta_datos}/certificados/{usuario_id}_{nivel_completado}.txt"
            with open(archivo_cert, 'w', encoding='utf-8') as f:
                f.write(certificado)
            print(f"\nüíæ Certificado guardado en: {archivo_cert}")
        except Exception as e:
            print(f"‚ùå Error al guardar certificado: {e}")
    
    def sistema_recompensas(self, usuario_id: str, puntos_ganados: int) -> None:
        """Sistema de recompensas por logros"""
        usuario = self.usuarios[usuario_id]
        
        recompensas = []
        
        # Recompensas por puntos totales
        puntos_totales = usuario['puntuacion_total']
        
        if puntos_totales >= 100 and puntos_totales - puntos_ganados < 100:
            recompensas.append("üéØ ¬°Primera centena! Desbloqueaste el modo historia")
        
        if puntos_totales >= 500 and puntos_totales - puntos_ganados < 500:
            recompensas.append("üöÄ ¬°Quinientos puntos! Ahora puedes crear proyectos avanzados")
        
        if puntos_totales >= 1000 and puntos_totales - puntos_ganados < 1000:
            recompensas.append("üëë ¬°Mil puntos! Eres oficialmente un MAESTRO de Pythonia")
        
        # Recompensas por temas completados
        temas_completados = len(usuario['progreso'])
        
        if temas_completados == 5:
            recompensas.append("üìö ¬°Cinco temas dominados! Desbloqueaste el asistente avanzado")
        
        if temas_completados == 10:
            recompensas.append("üéì ¬°Diez temas! Ya puedes ser mentor de otros estudiantes")
        
        # Mostrar recompensas
        if recompensas:
            print("\nüéÅ ¬°NUEVAS RECOMPENSAS DESBLOQUEADAS!")
            print("="*50)
            for recompensa in recompensas:
                print(f"   {recompensa}")
            input("\n‚è∏Ô∏è Presiona Enter para continuar...")
    
    def exportar_progreso(self, usuario_id: str) -> None:
        """Exporta el progreso del usuario"""
        usuario = self.usuarios[usuario_id]
        fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        reporte = {
            "usuario": usuario['nombre'],
            "email": usuario['email'],
            "fecha_reporte": datetime.now().isoformat(),
            "estadisticas": {
                "temas_completados": len(usuario['progreso']),
                "puntos_totales": usuario['puntuacion_total'],
                "nivel_actual": usuario['nivel_actual'],
                "retos_completados": len(usuario['retos_completados'])
            },
            "progreso_detallado": usuario['progreso'],
            "logros": usuario.get('logros', []),
            "preferencias": usuario['preferencias']
        }
        
        try:
            archivo_reporte = f"{self.ruta_datos}/progreso/{usuario_id}_reporte_{fecha_actual}.json"
            with open(archivo_reporte, 'w', encoding='utf-8') as f:
                json.dump(reporte, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìä Reporte de progreso exportado exitosamente!")
            print(f"üìÅ Ubicaci√≥n: {archivo_reporte}")
            
        except Exception as e:
            print(f"‚ùå Error al exportar progreso: {e}")
    
    def importar_progreso(self, archivo_progreso: str) -> str:
        """Importa progreso desde un archivo"""
        try:
            with open(archivo_progreso, 'r', encoding='utf-8') as f:
                datos = json.load(f)
            
            # Crear nuevo usuario con los datos importados
            usuario_id = f"imported_user_{len(self.usuarios) + 1}"
            self.usuarios[usuario_id] = {
                "nombre": datos.get('usuario', 'Usuario Importado'),
                "email": datos.get('email', 'email@ejemplo.com'),
                "fecha_registro": datetime.now().isoformat(),
                "nivel_actual": datos['estadisticas'].get('nivel_actual', 'nivel_0_absoluto_principiante'),
                "progreso": datos.get('progreso_detallado', {}),
                "evaluaciones_completadas": [],
                "puntuacion_total": datos['estadisticas'].get('puntos_totales', 0),
                "logros": datos.get('logros', []),
                "retos_completados": [],
                "preferencias": datos.get('preferencias', {
                    "modo_aprendizaje": "visual",
                    "tiempo_diario": 30,
                    "recordatorios": True
                })
            }
            
            self._guardar_usuario(usuario_id)
            
            print(f"\n‚úÖ Progreso importado exitosamente!")
            print(f"üÜî Nuevo ID de usuario: {usuario_id}")
            
            return usuario_id
            
        except Exception as e:
            print(f"‚ùå Error al importar progreso: {e}")
            return None


# Funci√≥n principal para ejecutar el sistema
def main():
    """Funci√≥n principal para ejecutar el sistema"""
    print("üöÄ Iniciando Sistema de Aprendizaje Pythonia...")
    time.sleep(1)
    
    sistema = SistemaAprendizajeCompleto()
    
    try:
        sistema.menu_principal_mejorado()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego! Gracias por usar Pythonia.")
        print("üí° Recuerda: la programaci√≥n se aprende practicando.")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üîß Por favor reporta este error al equipo de desarrollo.")


# Ejecutar el programa si se ejecuta directamente
if __name__ == "__main__":
    main()